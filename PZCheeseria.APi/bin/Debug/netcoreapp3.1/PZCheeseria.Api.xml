<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PZCheeseria.Api</name>
    </assembly>
    <members>
        <member name="M:PZCheeseria.Api.Controllers.CheesesController.Get">
            <summary>
            Get all cheeses
            </summary>
            
        </member>
        <member name="M:PZCheeseria.Api.Controllers.CheesesController.GetById(System.Int32)">
            <summary>
            Get cheese by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:PZCheeseria.Api.Controllers.CheesesController.Post(PZCheeseria.Api.Models.AddCheeseApiModel)">
            <summary>
            Add new cheese item
            </summary>
            <param name="model"></param>
            <remarks>Currently we do not have any authentication for Post. Given time, i would have liked to add authentication to Post</remarks>
        </member>
        <member name="M:PZCheeseria.Api.Controllers.CheesesController.ValidateFile(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            This method validates file. In Production, it should be doing lot more such as checking file extensions,
            virus scanning.
            If given time, I would like to add functional approach to it and return ExceptionResult or the file and let caller decide what to do
            </summary>
            <param name="file"></param>
            <exception cref="T:PZCheeseria.BusinessLogic.Exceptions.UnProcessableEntityException"></exception>
        </member>
        <member name="M:PZCheeseria.Api.Infrastructure.Middleware.ApiExceptionMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
             <remarks>
            Currently only interpreting UnProcessableEntityException and EntityNotFoundException (for GET method only)
             we can extend it to interpret combination of request type and exception and return appropriate status code
             for example, if the exception caught is EntityNotFoundException and request type is Get then we can return NotFound
             but if request type is Post, we can return BadRequest with appropriate details
             </remarks>
        </member>
    </members>
</doc>
